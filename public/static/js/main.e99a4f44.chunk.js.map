{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","react_default","a","createElement","Fragment","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","_useCollectionData","useCollectionData","idField","messages","Object","slicedToArray","_useState","useState","_useState2","formValue","setFormValue","sendMessage","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","_auth$currentUser","uid","photoURL","wrap","_context","prev","next","preventDefault","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","stop","_x","apply","this","arguments","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","_props$message","messageClass","concat","alt","src","App","_useAuthState","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e99a4f44.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\nimport './Chat.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyD1q2WvZ1JRGqCyjKa4LylpzMfhyZuCDWU\",\n  authDomain: \"showintel-8dcf8.firebaseapp.com\",\n  databaseURL: \"https://showintel-8dcf8.firebaseio.com\",\n  projectId: \"showintel-8dcf8\",\n  storageBucket: \"showintel-8dcf8.appspot.com\",\n  messagingSenderId: \"58581328267\",\n  appId: \"1:58581328267:web:49b2e8b62825a148648f8e\",\n  measurementId: \"G-214P1FQBKT\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n// const analytics = firebase.analytics();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Sandbox Env</h1>\n        <SignOut />\n      </header>\n      <section className=\"body\">\n        <section className=\"main\">\n          <p>Main Body</p>\n        </section>\n        <section className=\"rail\">\n          {user ? <ChatRoom /> : <SignIn />}\n        </section>\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n      <p>Do not violate the community guidelines or you will be banned for life!</p>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage} className=\"chatInput\">\n      <div className=\"inputContainer\">\n        <input \n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)} \n          placeholder=\"Say something...\" />\n        <button type=\"submit\" disabled={!formValue}>Go</button>\n      </div>\n    </form>\n  </>)\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img alt=\"avatar\" src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}